@typeparam TInfo where TInfo : INameable
@namespace RecipeFriends.Components.TagBox

<MudElement>
    <MudChipSet T="TInfo" AllClosable="true" OnClose="ChipClosed" style="display:inline-flex">
        @foreach (var item in Items)
        {
            <MudChip Text="@item.Name" Tag="@item"></MudChip>
        }
    </MudChipSet>
    <div style="display:inline-flex">
        <MudAutocomplete T="TInfo" SearchFunc="@SearchItems" ValueChanged="@AddItem"
            ToStringFunc="@(e => e == null ? null : e.Name)" />
    </div>
</MudElement>

@code {
    private List<TInfo> filteredItems = new List<TInfo>();

    [Parameter]
    public List<TInfo> AllItems { get; set; } = new List<TInfo>();

    [Parameter]
    public List<TInfo> Items { get; set; } = new List<TInfo>();

    [Parameter]
    public EventCallback<List<TInfo>> OnItemsUpdated { get; set; }

    public void ChipClosed(MudChip<TInfo> chip) => RemoveItem((TInfo)chip!.Tag);

    private async Task<IEnumerable<TInfo>> SearchItems(string value, CancellationToken token)
    {
        filteredItems = AllItems
        .Where(t => t.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
        .Where(t => !Items.Any(rt => rt.Id == t.Id))
        .OrderBy((x) => x.Name)
        .ToList();
        return await Task.FromResult<IEnumerable<TInfo>>(filteredItems);
    }

    private void AddItem(TInfo item)
    {
        Items.Add(item);
        OnItemsUpdated.InvokeAsync(Items);
    }

    private void RemoveItem(TInfo? item)
    {
        if (item != null)
        {
            Items.RemoveAll(t => t.Id == item.Id);
            OnItemsUpdated.InvokeAsync(Items);
        }
    }
}
