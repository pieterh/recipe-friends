<MudElement>
    <div>
        <h4>Current Tags</h4>
        <ul>
            @foreach (var tag in RecipeTags)
            {
                <li>
                    @tag.Name
                    <MudButton OnClick="() => RemoveTag(tag)">Remove</MudButton>
                </li>
            }
        </ul>

        <h4>Available Tags</h4>
        <ul>
            @foreach (var tag in AllTags.Where(t => !RecipeTags.Any(rt => rt == null || t == null || rt.Id == t.Id)))
            {
                <li>
                    @tag.Name
                    <MudButton OnClick="() => AddTag(tag)">Add</MudButton>
                </li>
            }
        </ul>    
    </div>
</MudElement>

@code {
    [Parameter]
    public List<TagInfo> AllTags { get; set; } = new List<TagInfo>();

    [Parameter]
    public List<TagInfo> RecipeTags { get; set; } = new List<TagInfo>();

    [Parameter]
    public EventCallback<List<TagInfo>> OnTagsUpdated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AllTags == null) AllTags = new List<TagInfo>();
        if (RecipeTags == null) RecipeTags = new List<TagInfo>();
        await Task.CompletedTask;
    }

    private void AddTag(TagInfo tag)
    {
        if (!RecipeTags.Any(t => t.Id == tag.Id))
        {
            RecipeTags.Add(tag); 
            OnTagsUpdated.InvokeAsync(RecipeTags);
            StateHasChanged(); 
        }
    }

    private void RemoveTag(TagInfo tag)
    {
        RecipeTags.RemoveAll(t => t.Id == tag.Id); 
        OnTagsUpdated.InvokeAsync(RecipeTags);
        StateHasChanged();
    }
}
