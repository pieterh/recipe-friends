@page "/recipe/list"

@using RecipeFriends.Services
@using RecipeFriends.Shared.DTO

@inject NavigationManager NavigationManager
@inject IRecipeFriendsService RecipeFriendsService
@inject IDialogService DialogService
@inject IRecipeService RecipeService
@inject IDocumentService DocumentService
@inject IJSRuntime JS

<PageTitle>Recipes</PageTitle>
<h1>Recipes</h1>

@if (recipes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid T="RecipeInfo" Items="@recipes" Filterable="true" QuickFilter="@_quickFilter"
    FilterMode="@DataGridFilterMode.ColumnFilterRow">
    <ToolBarContent>
        <MudButton OnClick="() => NewRecipe()" Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>
        <MudButton Color="@Color.Error" Class="remove-item-btn">Remove Item</MudButton>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Title" Title="Title" />
        <PropertyColumn Property="x => x.Category.Name" Title="Category" />
        <PropertyColumn Property="x => x.TagsAsString" Title="Tags">
            <FilterTemplate>
                <MudIconButton OnClick="@OpenTagFilter" Icon="@_icon" Size="@Size.Small" />
                <MudOverlay @bind-Visible="@_filterOpen" AutoClose="true" />
                <MudPopover Open="@_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                    Style="width:150px">
                    <MudStack Spacing="0">
                        <MudCheckBox T="bool" Label="Select All" Size="@Size.Small" Value="@_selectAll"
                            ValueChanged="@SelectAll" />
                        <MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
                            @foreach (var item in tags)
                                {
                                    <MudCheckBox T="bool" Label="@($"{item.Name}")" 
                                        Size="@Size.Small"
                                        Value="@(_selectedItems.Contains(item))"
                                        ValueChanged="@((value) => SelectedChanged(value, item))" />
                                }
                            </MudStack>
                            <MudStack Row="true">
                                <MudButton OnClick="@(() => ClearFilterAsync(context))">Clear</MudButton>
                                <MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context))">Filter
                                </MudButton>
                            </MudStack>
                        </MudStack>
                    </MudPopover>
                </FilterTemplate>
            </PropertyColumn>
            <TemplateColumn CellClass="d-flex justify-end" Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudStack Row>
                     <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary"
                         OnClick="() => ViewRecipe(context.Item.Id)">View</MudButton>
                     <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary"
                         OnClick="async () => await OpenEditDialog(context.Item.Id)">Edit</MudButton>
                     <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary"
                         OnClick="() => DownloadRecipe(context.Item.Id)">Download</MudButton>
                 </MudStack>
             </CellTemplate>
         </TemplateColumn>
     </Columns>
     <PagerContent>
         <MudDataGridPager T="RecipeInfo" />
     </PagerContent>
 </MudDataGrid>
}

@code {
    private RecipeFriends.Shared.DTO.RecipeInfo[] recipes = [];
    private RecipeFriends.Shared.DTO.TagInfo[] tags = [];
    private string searchString = string.Empty;

    HashSet<TagInfo> _selectedItems = new();
    HashSet<TagInfo> _filterItems = new();
    FilterDefinition<RecipeInfo> _filterDefinition = new FilterDefinition<RecipeInfo>();
    string _icon = Icons.Material.Outlined.FilterAlt;
    bool _selectAll = true;
    bool _filterOpen = false;

    protected override async Task OnInitializedAsync()
    {
        try{
            await RefreshRecipes();
            tags = await RecipeService.GetTagsAsync(CancellationToken.None);
            _selectedItems = tags.ToHashSet();
            _filterItems = tags.ToHashSet();

            _filterDefinition = new FilterDefinition<RecipeInfo>
                {
                    FilterFunction = (x) =>
                    {
                        var f = _filterItems.Select(x => x.Name).Intersect(x.Tags);
                        return f.Count() > 0;
                    }
                };
        }catch(Exception e){
            Console.WriteLine(e.Message);            
        }
    }

    private Func<RecipeInfo, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ShortDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.TagsAsString.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    void OpenTagFilter()
    {
        _filterOpen = true;
    }

    private async Task ClearFilterAsync(FilterContext<RecipeInfo> context)
    {
        _selectedItems = tags.ToHashSet();
        _filterItems = tags.ToHashSet();
        _icon = Icons.Material.Outlined.FilterAlt;
        await context.Actions.ClearFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private async Task ApplyFilterAsync(FilterContext<RecipeInfo> context)
    {
        _filterItems = _selectedItems.ToHashSet();
        _icon = _filterItems.Count == tags.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
        await context.Actions.ApplyFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private void SelectedChanged(bool value, TagInfo item)
    {
        if (value)
            _selectedItems.Add(item);
        else
            _selectedItems.Remove(item);

        if (_selectedItems.Count == tags.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    private void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedItems = tags.ToHashSet();
        }
        else
        {
            _selectedItems.Clear();
        }
    }

    private async Task NewRecipe()
    {
        var parameters = new DialogParameters<RecipeView>();
        parameters.Add(x => x.Id, -1);

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                BackdropClick = false,
                CloseOnEscapeKey = true
            };
        var dialog = DialogService.Show<RecipeEdit>("", parameters, options);
        await dialog.Result;
        await RefreshRecipes();
    }

    private async Task OpenEditDialog(int id)
    {
        var parameters = new DialogParameters<RecipeView>();
        parameters.Add(x => x.Id, id);

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                BackdropClick = false,
                CloseOnEscapeKey = true
            };
        var dialog = DialogService.Show<RecipeEdit>("uh", parameters, options);
        var r = await dialog.Result;
        await RefreshRecipes();
    }

    private void ViewRecipe(int id)
    {
        //var recipe = recipes.Where<RecipeInfo>(x => x.Id == id).First<RecipeInfo>();

        var parameters = new DialogParameters<RecipeView>();
        parameters.Add(x => x.Id, id);

        var options = new DialogOptions { FullScreen = true, CloseOnEscapeKey = true };
        DialogService.Show<RecipeView>("", parameters, options);
    }

    private async void DownloadRecipe(int id)
    {
        Console.WriteLine("== go");
        try
        {

            var customFileType = new FilePickerFileType(

                new Dictionary<DevicePlatform, IEnumerable<string>>
                {
                    { DevicePlatform.WinUI, new[] { ".pdf", ".pdf" } }, // file extension
                    { DevicePlatform.macOS, new[] { "pdf", "pdf" } }, // UTType values
                    { DevicePlatform.MacCatalyst, new[] { "pdf", "pdf" } }, // UTType values
                });

            PickOptions options = new()
            {
                PickerTitle = "Please select a directory for the pdf",
                FileTypes = customFileType,
            };

            var result = await FolderPicker.Default.PickAsync("~");
            
            if (result != null && result.IsSuccessful && result.Folder != null && !string.IsNullOrWhiteSpace(result.Folder.Path))
            {                
                var pdf = await DocumentService.RecipeToPDFAsync(id, CancellationToken.None);                
                var pdfFileName = $"{result.Folder.Path}{Path.DirectorySeparatorChar}Recipe.pdf";
                
                if (File.Exists(pdfFileName))
                    File.Delete(pdfFileName);

                using FileStream outputStream = System.IO.File.OpenWrite(pdfFileName);
                using StreamWriter streamWriter = new StreamWriter(outputStream);
                await streamWriter.BaseStream.WriteAsync(pdf);
                await streamWriter.FlushAsync();
                streamWriter.Close();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        Console.WriteLine("== done");
    }

    private async Task RefreshRecipes()
    {
        var orderedRecipes = (await RecipeService.GetRecipesAsync(CancellationToken.None)).OrderBy((x) => x.Title);
        recipes = orderedRecipes.ToArray();
    }
}