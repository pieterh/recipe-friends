@page "/recipe/edit/{Id:int}"
@using RecipeFriends.Shared.DTO
@using RecipeFriends.Components.TagBox
@using RecipeFriends.Data
@using RecipeFriends.Services

@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.subtitle1">Edit Recipe</MudText>
    </TitleContent>
    <DialogContent>
        <div>
        <MudContainer Style="max-height: 600px; overflow-y: scroll">
        @if (recipeDetails == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
             <EditForm Model="@recipeDetails" OnValidSubmit="HandleValidSubmit">
                
                <DataAnnotationsValidator />
                <ValidationSummary />

                <MudGrid Spacing="2" Justify="Justify.Center" >
                    <MudItem xs="12">
                        <MudPaper Height="175px" xs="12" Class="pa-4">             
                            <div class="d-flex flex-column py-1">
                                <InputText id="title" xs="8" @bind-Value="recipeDetails.Title" />                      
                                <InputSelect id="catagory"  xs="4" TValue="Shared.Catagories" @bind-Value="recipeDetails.Catagory">
                                    @foreach (var cat in Enum.GetValues<Shared.Catagories>())
                                    {
                                        <option value="@cat">@cat</option>
                                    }
                                </InputSelect>
                                <TagBox AllTags="@allTags" RecipeTags="recipeDetails.Tags" ></TagBox>                                               
                            </div>
                        </MudPaper>
                    </MudItem>
                    <MudInputLabel>Short description</MudInputLabel>              
                    <MudItem xs="12">                       
                        <MudPaper Height="204px" xs="12">
                            <MarkdownEditor MaxHeight="100px" @bind-Value="@recipeDetails.ShortDescription" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide", "table" })'/>                        
                        </MudPaper>                       
                    </MudItem>
                    <MudInputLabel>Description</MudInputLabel>
                    <MudItem xs="12">
                        <MudPaper Height="329px" xs="12">                        
                            <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Description" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })'/>                        
                        </MudPaper>
                    </MudItem>
                    <MudInputLabel>Directions</MudInputLabel>
                    <MudItem xs="12">
                        <MudPaper Height="329px" xs="12">                       
                            <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Directions" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })'/>                       
                        </MudPaper>
                    </MudItem>
                    <MudInputLabel>Notes</MudInputLabel>
                    <MudItem xs="12">
                        <MudPaper Height="329px" xs="12">                       
                            <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Notes" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })'/>                       
                        </MudPaper>
                    </MudItem>                         
                </MudGrid>          
            </EditForm>
            @if (!string.IsNullOrEmpty(saveStatusMessage))
            {
                <div class="alert alert-info">
                    @saveStatusMessage
                </div>
            }
        }
        </MudContainer>
        </div>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="() => Cancel()">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="() => HandleValidSubmit()">Update</MudButton>       
    </DialogActions>    
</MudDialog>

@code {
    [Parameter] public int Id { get; set; }

    private RecipeDetails? recipeDetails;
    private List<TagInfo> allTags;

    private string saveStatusMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0) {
            recipeDetails = await RecipeService.GetRecipeDetailsAsync(Id, CancellationToken.None);
        }else{
            recipeDetails = new(){Title ="", ShortDescription ="", Description = "", Directions = "", Catagory = Catagories.MainCourse, PreparationTime = TimeOnly.MinValue, CookingTime = TimeOnly.MinValue };
        }
        var t = await RecipeService.GetTagsAsync(CancellationToken.None);
        allTags = t.ToList();
    }

    private async Task HandleValidSubmit()
    {
        if (recipeDetails != null)
        {
            bool success = await RecipeService.SaveRecipeDetailsAsync(recipeDetails, CancellationToken.None);

            if (success)
            {
                // Update is successful, navigate to some other page or show success message
                saveStatusMessage = "Successfully saved.";
                NavigationManager.NavigateTo("/recipe/list");
            }
            else
            {
                // Show error message
                saveStatusMessage = "Failed to save.";
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/recipe/list");
    }
}
