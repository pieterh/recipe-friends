@page "/recipe/edit/{Id:int}"
@using RecipeFriends.Shared.DTO
@using RecipeFriends.Components.TagBox
@using RecipeFriends.Components.FileDropZone
@using RecipeFriends.Components.ImageGallery
@using RecipeFriends.Data
@using RecipeFriends.Services

@inject ISnackbar Snackbar
@inject IRecipeService RecipeService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.subtitle1">Edit Recipe</MudText>
    </TitleContent>
    <DialogContent>
        <div>
            <MudContainer Style="height: 600px; overflow-y: scroll">
                @if (recipeDetails == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <EditForm Model="@recipeDetails" OnValidSubmit="HandleValidSubmit">

                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                            <MudTabPanel Text="Properties">
                                <MudPaper Height="250px" xs="12" Class="pa-4">
                                    <div class="d-flex flex-column py-1">
                                        <MudTextField id="title" xs="8" @bind-Value="recipeDetails.Title" />
                                        <MudSelect id="category" xs="4" T="CategoryInfo"
                                            @bind-Value="recipeDetails.Category">
                                            @foreach (var cat in allCategories ?? Enumerable.Empty<CategoryInfo>())
                                            {
                                                <MudSelectItem Value="@cat" />
                                            }
                                        </MudSelect>
                                        <TagBox TInfo="TagInfo" AllItems="@allTags" Items="recipeDetails.Tags"></TagBox>
                                    </div>
                                </MudPaper>
                            </MudTabPanel>
                            <MudTabPanel Text="Description">
                                <MudInputLabel>Short description</MudInputLabel>
                                <MudPaper Height="204px" xs="12">
                                    <MarkdownEditor MaxHeight="100px" @bind-Value="@recipeDetails.ShortDescription"
                                        HideIcons='@(new string[] { "code", "image", "link", "quote", "guide", "table" })' />
                                </MudPaper>
                                <MudInputLabel>Description</MudInputLabel>
                                <MudPaper Height="329px" xs="12">
                                    <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Description"
                                        HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })' />
                                </MudPaper>
                            </MudTabPanel>
                            <MudTabPanel Text="Ingredients">
                                <MudPaper Height="329px" xs="12">
                                    <MudDataGrid MaxHeight="225px" T="IngredientDetails" Items="@recipeDetails.Ingredients"
                                        EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick"
                                        ReadOnly="false" Bordered="true" Dense="true" RowsPerPage="5">
                                        <ToolBarContent>
                                            <MudButton OnClick="() => AddIngredient()" Color="@Color.Success"
                                                Class="add-item-btn">Add Item</MudButton>
                                        </ToolBarContent>
                                        <Columns>
                                            <PropertyColumn Property="x => x.Order" Title="Order" SortBy="@_sortBy" />
                                            <PropertyColumn Property="x => x.Name" Title="Name" />
                                            <PropertyColumn Property="x => x.Amount" Title="Amount" />
                                            <PropertyColumn Property="x => x.Measurement" Title="Measurement">
                                                <EditTemplate Context="ingredient">
                                                    <MudSelect T="MeasurementInfo" @bind-Value="ingredient.Item.Measurement"
                                                        Margin="@Margin.Dense">
                                                        @foreach (var measurement in allMeasurements)
                                                        {
                                                            <MudSelectItem Value="@measurement" />
                                                        }
                                                    </MudSelect>
                                                </EditTemplate>
                                            </PropertyColumn>
                                        </Columns>
                                    </MudDataGrid>
                                </MudPaper>
                            </MudTabPanel>
                            <MudTabPanel Text="Equipment">
                                <TagBox TInfo="EquipmentInfo" AllItems="@allEquipment" Items="recipeDetails.Equipment">
                                </TagBox>
                            </MudTabPanel>
                            <MudTabPanel Text="Directions">
                                <MudPaper Height="329px" xs="12">
                                    <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Directions"
                                        HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })' />
                                </MudPaper>
                            </MudTabPanel>
                            <MudTabPanel Text="Images">
                                <MudGrid>
                                    <MudItem xs="12">
                                        <ImageGallery ImagesToShow="@_imagesToShow" OnFileAdded=HandleFileAdded OnFilesRemoved=HandleFilesRemoved/>                                        
                                    </MudItem>
                                </MudGrid>
                            </MudTabPanel>
                            <MudTabPanel Text="Notes">
                                <MudPaper Height="329px" xs="12">
                                    <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Notes"
                                        HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })' />
                                </MudPaper>
                            </MudTabPanel>
                        </MudTabs>
                    </EditForm>
                    @if (!string.IsNullOrEmpty(saveStatusMessage))
                    {
                        <div class="alert alert-info">
                            @saveStatusMessage
                        </div>
                    }
                }
            </MudContainer>
        </div>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="() => Cancel()">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="() => HandleValidSubmit()">Update</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int Id { get; set; }


    private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();

    private RecipeDetails? recipeDetails;
    private List<TagInfo> allTags;
    private List<EquipmentInfo> allEquipment;
    private List<CategoryInfo> allCategories;
    private List<MeasurementInfo> allMeasurements;

    private List<ImageData> _imagesToShow = new List<ImageData>();
    private List<ImageData> _orgImages = new List<ImageData>();
    private List<ImageData> _newImages = new List<ImageData>();
    private List<ImageData> _removedImages = new List<ImageData>();


    private string saveStatusMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var tagsTask = RecipeService.GetTagsAsync(CancellationToken.None);
        var equipmentTask = RecipeService.GetEquipmentAsync(CancellationToken.None);
        var categoriesTask = RecipeService.GetCategoriesAsync(CancellationToken.None);
        var measurementsTask = RecipeService.GetMeasurementsAsync(CancellationToken.None);

        await Task.WhenAll(tagsTask, equipmentTask, categoriesTask, measurementsTask);

        allTags = (await tagsTask).ToList();
        allEquipment = (await equipmentTask).ToList();
        allCategories = (await categoriesTask).ToList();
        allMeasurements = (await measurementsTask).ToList();

        if (Id > 0)
        {
            recipeDetails = await RecipeService.GetRecipeDetailsAsync(Id, CancellationToken.None);
        }
        else
        {
            recipeDetails = new()
                {
                    Title = "",
                    ShortDescription = "",
                    Description = "",
                    Directions = "",
                    Category =
                allCategories.First(),
                    PreparationTime = TimeOnly.MinValue,
                    CookingTime = TimeOnly.MinValue
                };
        }

        foreach (var img in recipeDetails.Images)
        {
            var data = await RecipeService.GetImageDataAsync(img.Id, CancellationToken.None);
            _orgImages.Add(data);
        }

        _imagesToShow = new List<ImageData>(_orgImages);
    }
    // custom sort by name length
    private Func<IngredientDetails, object> _sortBy => x =>
    {
        return x.Order;
    };

    private async Task HandleValidSubmit()
    {
        if (recipeDetails != null)
        {
            foreach(var image in recipeDetails.Images){
                var imageSource = _orgImages.FirstOrDefault(x => x.Id == image.Id);
                if (imageSource != null){
                    image.Order = imageSource.Order;
                    image.Title = imageSource.Title;
                    image.Name = imageSource.Name;
                }
            }
            
            bool success = await RecipeService.SaveRecipeDetailsAsync(recipeDetails, _newImages, _removedImages ,CancellationToken.None);

            if (success)
            {
                // Update is successful, navigate to some other page or show success message
                saveStatusMessage = "Successfully saved.";
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                // Show error message
                saveStatusMessage = "Failed to save.";
            }
        }
    }



    private void AddIngredient()
    {
        var highestOrder = 0;
        foreach (var i in recipeDetails.Ingredients)
        {
            if (i.Order > highestOrder)
                highestOrder = i.Order;
        }
        var newIngredient = new IngredientDetails()
            {
                Name = string.Empty,
                Amount = 0,
                Order = highestOrder + 1,
                Measurement = null
            };
        recipeDetails.Ingredients.Add(newIngredient);
    }

    private async Task HandleFilesRemoved(string[] hashes)
    {
        foreach(var hash in hashes){
            var f1 = _newImages.FirstOrDefault((x) => x.HashValue == hash);
            if (f1 != null){
                _newImages.Remove(f1);
            }else
            {
                var f2 = _orgImages.FirstOrDefault((x) => x.HashValue == hash);
                if (f2 != null){
                    _removedImages.Add(f2);
                    _orgImages.Remove(f2);
                }
            }
        }
        UpdateList();

        // we are in an event and changing data. Notify that the state is changed and the UI will be redrawn properly
        StateHasChanged();
    }

    private async Task HandleFileAdded(IBrowserFile file)
    {
        Logger.Info($"=> HandleFileAdded - {file?.Name} - adding.");

        try
        {
            const int maxSizeBytes = 1024 * 1024 * 7;
            if (file.Size >= maxSizeBytes)
            {
                var msg = $"The file size is {file.Size} bytes and exceeded the maximum size of {maxSizeBytes}.";
                Snackbar.Add(msg, Severity.Error);
                Logger.Error(msg);
                return;
            }

            int highestOrder0 = _orgImages.Any() ? _orgImages.Max(img => img.Order) : 0;
            int highestOrder1 = _newImages.Any() ? _newImages.Max(img => img.Order) : 0;
            int highestOrder2 = _removedImages.Any() ? _removedImages.Max(img => img.Order) : 0;
            int highestOrder = Math.Max(highestOrder0, Math.Max(highestOrder1, highestOrder2));

            using var stream = file.OpenReadStream(maxSizeBytes);
            using MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms, CancellationToken.None);
            var image = new ImageData()
                {
                    Id = 0,
                    Order = highestOrder + 1,
                    Name = file.Name,
                    Title = file.Name,
                    Data = ms.ToArray()
                };
            _newImages.Add(image);

            UpdateList();
            Logger.Info($"<= HandleFileAdded - {file.Name} - added.");
            // we are in an event and changing data. Notify that the state is changed and the UI will be redrawn properly
            StateHasChanged();
        }
        catch (System.IO.IOException ioe)
        {
            Logger.Error(ioe, "Problem saving attachments");
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "Something is wrong handling the added file");
        }
    }

    private static void RenumberImages(IList<ImageData> images){
        int c = 1;
        foreach(var image in images.OrderBy(x => x.Order)){
            image.Order = c;
            c++;
        }
    }

    private void UpdateList(){
        List<ImageData> resultList = new List<ImageData>(_orgImages);
        foreach (ImageData removedImage in _removedImages)
        {
            resultList.Remove(removedImage);
        }
        resultList.AddRange(_newImages);
        RenumberImages(resultList);
        _imagesToShow = resultList;
    }

    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel);
    }

    public static string GetDataURL(string fileName, byte[] imgData)
    {
        return "data:image"
        + Path.GetExtension(fileName).Replace(".", "").ToLower()
        + ";base64,"
        + Convert.ToBase64String(imgData);
    }
}
