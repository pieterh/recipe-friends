@page "/recipe/edit/{Id:int}"
@using RecipeFriends.Shared.DTO
@using RecipeFriends.Components.TagBox
@using RecipeFriends.Components.FileDropZone
@using RecipeFriends.Components.ImageGallery
@using RecipeFriends.Data
@using RecipeFriends.Services

@inject ISnackbar Snackbar
@inject IRecipeService RecipeService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.subtitle1">Edit Recipe</MudText>
    </TitleContent>
    <DialogContent>
        <div>
        <MudContainer Style="height: 600px; overflow-y: scroll">
        @if (recipeDetails == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
             <EditForm Model="@recipeDetails" OnValidSubmit="HandleValidSubmit">
                
                <DataAnnotationsValidator />
                <ValidationSummary />

               <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                    <MudTabPanel Text="Properties">
                        <MudPaper Height="250px" xs="12" Class="pa-4">             
                            <div class="d-flex flex-column py-1">
                                <MudTextField id="title" xs="8" @bind-Value="recipeDetails.Title" />                      
                                <MudSelect id="category"  xs="4" T="CategoryInfo" @bind-Value="recipeDetails.Category">
                                    @foreach (var cat in allCategories ?? Enumerable.Empty<CategoryInfo>())
                                    {
                                        <MudSelectItem Value="cat" />
                                    }
                                </MudSelect>
                                <TagBox TInfo="TagInfo" AllItems="@allTags" Items="recipeDetails.Tags" ></TagBox>                                               
                            </div>
                        </MudPaper>
                    </MudTabPanel>
                    <MudTabPanel Text="Description">
                        <MudInputLabel>Short description</MudInputLabel>                                        
                            <MudPaper Height="204px" xs="12">
                                <MarkdownEditor MaxHeight="100px" @bind-Value="@recipeDetails.ShortDescription" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide", "table" })'/>                        
                            </MudPaper>
                        <MudInputLabel>Description</MudInputLabel>                        
                            <MudPaper Height="329px" xs="12">                        
                                <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Description" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })'/>                        
                            </MudPaper>                       
                    </MudTabPanel>
                    <MudTabPanel Text="Ingredients">
                            <MudPaper Height="329px" xs="12">                       
                                <MudDataGrid MaxHeight="225px" T="IngredientDetails" Items="@recipeDetails.Ingredients" 
                                            EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick"
                                            ReadOnly="false"
                                            Bordered="true" Dense="true"
                                            RowsPerPage="5">
                                    <ToolBarContent>
                                        <MudButton OnClick="() => AddIngredient()" Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>                                    
                                    </ToolBarContent>                                         
                                    <Columns>
                                        <PropertyColumn Property="x => x.Order" Title="Order" SortBy="@_sortBy" />
                                        <PropertyColumn Property="x => x.Name" Title="Name" />
                                        <PropertyColumn Property="x => x.Amount" Title="Amount"  />
                                        <PropertyColumn Property="x => x.Measurement" Title="Measurement" >
                                            <EditTemplate Context="ingredient">
                                                <MudSelect T="MeasurementInfo" @bind-Value="ingredient.Item.Measurement" Margin="@Margin.Dense">
                                                    @foreach(var measurement in allMeasurements){
                                                        <MudSelectItem Value="measurement" />
                                                    }                                                        
                                                </MudSelect> 
                                            </EditTemplate>
                                        </PropertyColumn>    
                                    </Columns>                       
                                </MudDataGrid>                       
                            </MudPaper>
                    </MudTabPanel>
                    <MudTabPanel Text="Equipment">
                        <TagBox TInfo="EquipmentInfo" AllItems="@allEquipment" Items="recipeDetails.Equipment" ></TagBox> 
                    </MudTabPanel>
                    <MudTabPanel Text="Directions">                        
                        <MudPaper Height="329px" xs="12">                       
                            <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Directions" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })'/>                       
                        </MudPaper>
                    </MudTabPanel>
                    <MudTabPanel Text="Images">  
                        <MudGrid>
                            <MudItem xs="12">
                                <ImageGallery ImagesToShow="@imagesToShow" OnFileAdded="HandleFileAdded"></ImageGallery>
                                @* <MudGrid Justify="Justify.FlexStart">
                                    @foreach(var image in imagesToShow)
                                    {   
                                        <MudItem xs="3">
                                            <MudImage Src="@GetDataURL(image.Name, image.Data)" Alt="@image.Title" Elevation="25" Class="rounded-lg" style="max-height:200px;max-width:200px;height:auto;width:auto;" />
                                        </MudItem>
                                    }
                                    <MudItem xs="3">
                                        <FileDropZone OnFileAdded="HandleFileAdded"></FileDropZone>
                                    </MudItem>
                                </MudGrid> *@
                            </MudItem>
                        </MudGrid>                      
                    </MudTabPanel>  
                    <MudTabPanel Text="Notes">                        
                        <MudPaper Height="329px" xs="12">
                            <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Notes" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })'/>
                        </MudPaper>
                    </MudTabPanel>
                </MudTabs>
            </EditForm>
            @if (!string.IsNullOrEmpty(saveStatusMessage))
            {
                <div class="alert alert-info">
                    @saveStatusMessage
                </div>
            }
        }
        </MudContainer>
        </div>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="() => Cancel()">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="() => HandleValidSubmit()">Update</MudButton>       
    </DialogActions>    
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int Id { get; set; }

   
    private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();

    private RecipeDetails? recipeDetails;
    private List<TagInfo> allTags;
    private List<EquipmentInfo> allEquipment;
    private List<CategoryInfo> allCategories;
    private List<MeasurementInfo> allMeasurements;
    
    private List<ImageData> imagesToShow = new List<ImageData>();
    private List<ImageData> orgImages = new List<ImageData>();
    private List<ImageData> newImages = new List<ImageData>();
    private List<ImageData> removedImages = new List<ImageData>();


    private string saveStatusMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {        
        var tagsTask = RecipeService.GetTagsAsync(CancellationToken.None);
        var equipmentTask = RecipeService.GetEquipmentAsync(CancellationToken.None);
        var categoriesTask = RecipeService.GetCategoriesAsync(CancellationToken.None);
        var measurementsTask = RecipeService.GetMeasurementsAsync(CancellationToken.None);

        await Task.WhenAll(tagsTask, equipmentTask, categoriesTask, measurementsTask);

        allTags = (await tagsTask).ToList();
        allEquipment = (await equipmentTask).ToList();
        allCategories = (await categoriesTask).ToList();
        allMeasurements = (await measurementsTask).ToList();

        if (Id > 0) {
            recipeDetails = await RecipeService.GetRecipeDetailsAsync(Id, CancellationToken.None);
        }else{
            recipeDetails = new(){Title ="", ShortDescription ="", Description = "", Directions = "", Category = allCategories.First(), PreparationTime = TimeOnly.MinValue, CookingTime = TimeOnly.MinValue };
        }

        foreach(var img in recipeDetails.Images){
            var data = await RecipeService.GetImageDataAsync(img.Id, CancellationToken.None);
            orgImages.Add(data);
        }

        imagesToShow.AddRange(orgImages);
    }
    // custom sort by name length
    private Func<IngredientDetails, object> _sortBy => x =>
    {
        return x.Order;
    };

    private async Task HandleValidSubmit()
    {
        if (recipeDetails != null)
        {
            bool success = await RecipeService.SaveRecipeDetailsAsync(recipeDetails, CancellationToken.None);
            foreach(var img in newImages){
                success = await RecipeService.SaveImageDataAsync(recipeDetails.Id, img, CancellationToken.None);
            }

            if (success)
            {
                // Update is successful, navigate to some other page or show success message
                saveStatusMessage = "Successfully saved.";
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                // Show error message
                saveStatusMessage = "Failed to save.";
            }
        }
    }

    private void AddIngredient()
    {
        var highestOrder = 0;
        foreach(var i in recipeDetails.Ingredients){
            if (i.Order > highestOrder)
                highestOrder = i.Order;
        }
        var newIngredient = new IngredientDetails() {
            Name = string.Empty, 
            Amount = 0, 
            Order = highestOrder + 1, 
            Measurement = null
            };
        recipeDetails.Ingredients.Add(newIngredient);
    }

    private async Task HandleFileAdded(IBrowserFile file)
    {

        try{
            const int maxSizeBytes = 1024*1024*4;
            if (file.Size >= maxSizeBytes){
                var msg = $"The file size is {file.Size} bytes and exceeded the maximum size of {maxSizeBytes}.";                
                Snackbar.Add(msg, Severity.Error);
                Logger.Error(msg);
                return;
            }

            using var stream = file.OpenReadStream();
            using MemoryStream ms = new MemoryStream();            
            await stream.CopyToAsync(ms, CancellationToken.None);
            var image = new ImageData() {
                Id = 0,
                Name = file.Name,
                Title = file.Name,
                Data = ms.ToArray()
            };
            newImages.Add(image);       

            List<ImageData> resultList = new List<ImageData>(orgImages);
            foreach (ImageData removedImage in removedImages)
            {
                resultList.Remove(removedImage);
            }
            resultList.AddRange(newImages);
            imagesToShow = resultList;

        }catch(System.IO.IOException ioe)
        {
            Logger.Error(ioe, "Problem saving attachments");
        }

        Logger.Info($"File {file.Name} added.");

        // we are in an event and changing data. Notify that the state is changed and the UI will be redrawn properly
        StateHasChanged();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/recipe/list");
    }

    public static string GetDataURL(string fileName, byte[] imgData)
    {
        return "data:image" 
                    + Path.GetExtension(fileName).Replace(".","").ToLower()
                    + ";base64," 
                    + Convert.ToBase64String(imgData);
    }
}
