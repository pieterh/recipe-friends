@page "/recipe/edit/{Id:int}"
@using RecipeFriends.Shared.DTO
@using RecipeFriends.Components.TagBox
@using RecipeFriends.Data
@using RecipeFriends.Services

@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.subtitle1">Edit Recipe</MudText>
    </TitleContent>
    <DialogContent>
        <div>
        <MudContainer Style="max-height: 600px; overflow-y: scroll">
        @if (recipeDetails == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
             <EditForm Model="@recipeDetails" OnValidSubmit="HandleValidSubmit">
                
                <DataAnnotationsValidator />
                <ValidationSummary />

                <MudGrid Spacing="2" Justify="Justify.Center" >
                    <MudItem xs="12">
                        <MudPaper Height="250px" xs="12" Class="pa-4">             
                            <div class="d-flex flex-column py-1">
                                <MudTextField id="title" xs="8" @bind-Value="recipeDetails.Title" />                      
                                <MudSelect id="category"  xs="4" T="CategoryInfo" Value="recipeDetails.Category">
                                    @foreach (var cat in allCategories ?? Enumerable.Empty<CategoryInfo>())
                                    {
                                        <MudSelectItem Value="cat" />
                                    }
                                </MudSelect>
                                <TagBox AllTags="@allTags" RecipeTags="recipeDetails.Tags" ></TagBox>                                               
                            </div>
                        </MudPaper>
                    </MudItem>
                    <MudInputLabel>Short description</MudInputLabel>              
                    <MudItem xs="12">                       
                        <MudPaper Height="204px" xs="12">
                            <MarkdownEditor MaxHeight="100px" @bind-Value="@recipeDetails.ShortDescription" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide", "table" })'/>                        
                        </MudPaper>                       
                    </MudItem>
                    <MudInputLabel>Description</MudInputLabel>
                    <MudItem xs="12">
                        <MudPaper Height="329px" xs="12">                        
                            <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Description" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })'/>                        
                        </MudPaper>
                    </MudItem>
                    <MudInputLabel>Ingredients</MudInputLabel>
                    <MudItem xs="12">
                        <MudPaper Height="329px" xs="12">                       
                            <MudDataGrid MaxHeight="225px" T="IngredientDetails" Items="@recipeDetails.Ingredients" 
                                         EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick"
                                         ReadOnly="false"
                                         Bordered="true" Dense="true">
                                <ToolBarContent>
                                    <MudButton OnClick="() => AddIngredient()" Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>                                    
                                </ToolBarContent>                                         
                                <Columns>
                                    <PropertyColumn Property="x => x.Order" Title="Order" SortBy="@_sortBy" />
                                    <PropertyColumn Property="x => x.Name" Title="Name" />
                                    <PropertyColumn Property="x => x.Amount" Title="Amount"  />
                                    <PropertyColumn Property="x => x.Measurement" Title="Measurement" >
                                        <EditTemplate Context="ingredient">
                                            <MudSelect T="MeasurementInfo" @bind-Value="ingredient.Item.Measurement" Margin="@Margin.Dense">
                                                @foreach(var measurement in allMeasurements){
                                                    <MudSelectItem Value="measurement" />
                                                }                                                        
                                            </MudSelect> 
                                        </EditTemplate>
                                    </PropertyColumn>    
                                </Columns>                       
                            </MudDataGrid>                       
                        </MudPaper>
                    </MudItem>
                    <MudInputLabel>Directions</MudInputLabel>
                    <MudItem xs="12">
                        <MudPaper Height="329px" xs="12">                       
                            <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Directions" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })'/>                       
                        </MudPaper>
                    </MudItem>
                    <MudInputLabel>Notes</MudInputLabel>
                    <MudItem xs="12">
                        <MudPaper Height="329px" xs="12">                       
                            <MarkdownEditor MaxHeight="225px" @bind-Value="@recipeDetails.Notes" HideIcons='@(new string[] { "code", "image", "link", "quote", "guide" })'/>                       
                        </MudPaper>
                    </MudItem>                         
                </MudGrid>          
            </EditForm>
            @if (!string.IsNullOrEmpty(saveStatusMessage))
            {
                <div class="alert alert-info">
                    @saveStatusMessage
                </div>
            }
        }
        </MudContainer>
        </div>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="() => Cancel()">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="() => HandleValidSubmit()">Update</MudButton>       
    </DialogActions>    
</MudDialog>

@code {
    [Parameter] public int Id { get; set; }

    private RecipeDetails? recipeDetails;
    private List<TagInfo> allTags;
    private List<CategoryInfo> allCategories;
    private List<MeasurementInfo> allMeasurements;
    

    private string saveStatusMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {        
        allTags = (await RecipeService.GetTagsAsync(CancellationToken.None)) .ToList();
        allCategories = (await RecipeService.GetCategoriesAsync(CancellationToken.None)).ToList();
        allMeasurements = (await RecipeService.GetMeasurementsAsync(CancellationToken.None)).ToList();

        if (Id > 0) {
            recipeDetails = await RecipeService.GetRecipeDetailsAsync(Id, CancellationToken.None);
        }else{
            recipeDetails = new(){Title ="", ShortDescription ="", Description = "", Directions = "", Category = allCategories.First(), PreparationTime = TimeOnly.MinValue, CookingTime = TimeOnly.MinValue };
        }
    }
// custom sort by name length
    private Func<IngredientDetails, object> _sortBy => x =>
    {
        return x.Order;
    };

    private async Task HandleValidSubmit()
    {
        if (recipeDetails != null)
        {
            bool success = await RecipeService.SaveRecipeDetailsAsync(recipeDetails, CancellationToken.None);

            if (success)
            {
                // Update is successful, navigate to some other page or show success message
                saveStatusMessage = "Successfully saved.";
                NavigationManager.NavigateTo("/recipe/list");
            }
            else
            {
                // Show error message
                saveStatusMessage = "Failed to save.";
            }
        }
    }

    private void AddIngredient()
    {
        var highestOrder = 0;
        foreach(var i in recipeDetails.Ingredients){
            if (i.Order > highestOrder)
                highestOrder = i.Order;
        }
        var newIngredient = new IngredientDetails() {
            Name = string.Empty, 
            Amount = 0, 
            Order = highestOrder + 1, 
            Measurement = null
            };
        recipeDetails.Ingredients.Add(newIngredient);
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/recipe/list");
    }
}
